@model BarbieQ.Models.ViewModels.ListaArticulos;
@{
    Layout = "Layout";

}



<h1 class="titulo-producto">Resumen de tu carrito</h1>

<main class="carrito-compras">


    @foreach (var item in Model.Carrito)
    {
        <div class="carrito-item">
            <div class="carrito-item-img">
                <img src="~/img/productos/@(item.Id).jpg" alt="">
            </div>
            <div class="carrito-item-descripcion">
                <h3>@item.NombreProducto</h3>
                <p>@item.Precio.ToString("c")</p>
                <form>
                    <label>Cantidad</label>
                    <div>
                        <input type="number"
                               placeholder="Ingresa la cantidad"
                               value="@item.Cantidad"
                               max="5"
                               min="1"
                               name="cantidad"
                               id="" />
                    </div>
                </form>
            </div>
            <a href="javascript:" class="boton-producto eliminar-item">&#x1F5D1;</a>
            <input class="id" type="hidden" value="@item.Id" />
        </div>

    }



    <div class="carrito-item checkout">

        <div class="carrito-item-descripcion">
            <h3 id="totalProductos">Productos: @Model.TotalProductos</h3>
            <p id="totalAPagar" >Total a pagar: @Model.TotalPagar.ToString("c")</p>
        </div>
        <a href="" id="comprar" class="boton-producto eliminar-item">PROCEDER AL PAGO</a>
    </div>

</main>

<script>

    var totalProductos = document.getElementById("totalProductos");
    var totalPagar = document.getElementById("totalAPagar");
    var comprar = document.getElementById("comprar");

    comprar.addEventListener("click", async function (e) {
        try {
            e.preventDefault();
            if (totalPagar.textContent == "Total a pagar: $0.00")
            {
                
                alert("Nada que comprar");
                return;
            }

            const response = await fetch("/Home/Comprar", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
            });

            if (response.ok) {
                const resultado = await response.json();
                window.location.replace("/home/index");
            } else {
                console.error("Error al realizar la compra:", response.statusText);
            }
        } catch (error) {
            console.error("Error de red:", error);
        }
    });


    document.body.addEventListener("click", async function (e) {
        var target = e.target;
        if (target.tagName == "A") {
            var id = target.parentElement.querySelector(".id").value;

            try {
                const response = await fetch(`/Home/EliminarDelCarrito?productId=${id}`, {
                    method: "POST",
                });

                if (response.ok) {
                    // Manejar la respuesta del servidor si es necesario

                    let actual = await response.json();     
                    console.log(actual);
                    totalProductos.textContent = "Productos: " + actual.cantidadActual;
                    totalPagar.textContent = "Total a pagar: " + parseFloat(actual.totalPagar).toLocaleString('es-MX', { style: 'currency', currency: 'MXN' });



                    target.parentElement.remove();


                    

                    // Actualizar la interfaz de usuario si es necesario
                } else {
                    console.error("Error al eliminar del carrito:", response.statusText);
                }
            } catch (error) {
                console.error("Error de red:", error);
            }
        }
    });

</script>

